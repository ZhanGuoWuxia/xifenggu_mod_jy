---
--- Generated by Luanalysis
--- Created by Administrator.
--- DateTime: 2022/4/10 15:55
---

-------系统函数开始(非策划使用)------------
---
--[[函数绑定]]

print("init.lua called")

game_api = CS.ZhanGuoWuxia.Lua.LuaBridge

-- 游戏运行时
runtime = CS.ZhanGuoWuxia.GameRuntime.Instance

require 'extension'

reloadModule 'game_const'

reloadModule 'Util/util_functions'

reloadModule 'i18_map/entry'

require 'class'

util = require 'xlua.util'

aiManager = reloadModule("AI/aimanager")

LuaExecFinished = game_api.LuaExecFinished

local LoadLuaString = game_api.LoadLuaString
function executefile(luaFileName)
    assert(type(luaFileName) == 'string', "file name must be a string!")

    --dofile不支持中文路径 还是交给C#处理
    local content = LoadLuaString(luaFileName)
    local func = load(content, luaFileName)
    func()
end

----------系统函数结束(非策划使用)-----------


----------游戏逻辑API函数开始(策划使用)-----------

--进行一次概率判定
--种子初始化一次就行了
math.randomseed(os.time())
---@param val 概率值 值为0~100
function chance(val)
    if val <= 0 then
        return false
    end
    if val >= 100 then
        return true
    end
    val = val * 0.01
    return val >= math.random()
end


--设置flag
---@param flag string 标志名
---@param value string 标志值
set_flag = game_api.SetFlag

--获取flag
---@param flag string 标志名
---@return string 标志值
get_flag = game_api.GetFlag

--是否有flag
---@param flag string 标志名
---@return boolean 是否有flag
has_flag = game_api.HasFlag

--设置flag
---@param flag string 标志名
---@param value int 标志值
set_flag_int = game_api.SetFlagInt

--获取flag
---@param flag string 标志名
---@return int 标志值
get_flag_int = game_api.GetFlagInt

--移除flag
---@param flag string 标志名
remove_flag = game_api.RemoveFlag

--设置浮点数据
---@param key string 键
---@param float 值
set_float = game_api.SetFloat

--获取浮点数据
---@param key string 键
---@return float 值
get_float = game_api.GetFloat

--设置全局flag
---@param globalFlag string 标志名
---@param value string 标志值
set_global_flag = game_api.SetGlobalFlag

--获取全局flag
---@param globalFlag string 标志名
---@return string 标志值
get_global_flag = game_api.GetGlobalFlag

--是否有全局flag
---@param globalFlag string 标志名
---@return boolean 是否有flag
has_global_flag = game_api.HasGlobalFlag

--设置全局flag
---@param globalFlag string 标志名
---@param value int 标志值
set_global_flag_int = game_api.SetGlobalFlagInt

--获取全局flag
---@param globalFlag string 标志名
---@return int 标志值
get_global_flag_int = game_api.GetGlobalFlagInt

--移除flag
---@param globalFlag string 标志名
remove_global_flag = game_api.RemoveGlobalFlag




--学习技能
---@param role RoleInstance|string 角色实例或者角色Id
---@param skillId string 技能id
---@param forceLearn bool 是否强制学习(强制学习不会判定学习条件)
---@param needNotice bool 是否提示学习结果
---@return boolean 是否学习成功
local CSHARP_LEARN_SKILL = game_api.Learn
function learn_skill(role, skillId, skillLevel, forceLearn, needNotice)
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    if not role then
        return false
    end
    skillLevel = skillLevel or 1
    forceLearn = forceLearn or false
    needNotice = needNotice or false
    return CSHARP_LEARN_SKILL(role, skillId, skillLevel, forceLearn, needNotice)
end

--能否学习技能
---@param role RoleInstance|string 角色实例或者角色Id
---@param skillId string 技能id
---@return boolean 能否学习
local CSHARP_CAN_LEARN_SKILL = game_api.CanLearnSkill
function can_learn_skill(role, skillId)
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    if not role then
        return false
    end
    return CSHARP_CAN_LEARN_SKILL(role, skillId)
end

--延时
---@param second float 延时时间(秒)
wait_for_seconds = util.async_to_sync(game_api.WaitForSeconds)

--提示弹窗(阻塞协程)
---@param message string 要展示的信息文本
local CSHARP_MSG_BOX = util.async_to_sync(game_api.NoticeAsync)
function pop_msg_box(msg)
    msg = i18n_text(msg)
    CSHARP_MSG_BOX(msg)
end

--播放bgm
---@param bgmPath string 音乐资源路径
---@param fadeDuration float 过渡时间  默认为0（小于等于0会立即切换）
local CSHARP_PLAY_BGM = game_api.PlayBGM
function play_bgm(bgmPath, fadeDuration)
    fadeDuration = fadeDuration or 0
    CSHARP_PLAY_BGM(bgmPath, fadeDuration)
end

--停止bgm
---@param duration float 过渡时间  默认为0（小于等于0会立即切换）
stop_bgm = game_api.StopBGM

--播放一次指定路径的音效(2D)
---@param clipPath string 音效资源路径
play_sfx = game_api.PlaySFX

--显示引导
---@param guideDatas table 引导列表
---guideData格式 {Path="UI对象名", ,ShapeType = GuideShapType.Rect, GuideInfo = "引导内容"}
local CSHARP_SHOW_GUIDE = util.async_to_sync(game_api.ShowGuide)
function show_guide(guideDatas)
    --翻译一下
    for i = 1, #guideDatas do
        if guideDatas[i].GuideInfo then
            guideDatas[i].GuideInfo = i18n_text(guideDatas[i].GuideInfo)
        end
    end
    CSHARP_SHOW_GUIDE(guideDatas)
end

--用于过回合时展示下门派AI的行动信息
---@param menpai MenpaiInstance 门派
---@param actionText string 信息文本
show_menpai_action = util.async_to_sync(game_api.ShowMenpaiAction)

--显示当前回合数变化动画UI
show_roundchange_tip = util.async_to_sync(game_api.ShowRoundChangeTip)

--判定一个门派是否为玩家所在门派
---@param menpai MenpaiInstance 门派实例
---@return bool bool
is_player_menpai = api_util.menpai_api_import(game_api.IsPlayerMenpai)

--获取玩家的门派
---@return menpai MenpaiInstance
get_player_menpai = game_api.GetPlayerMenpai

--获取地块所属的门派势力
---@param area AreaInstance 门派实例
---@return menpai MenpaiInstance 门派实例
menpai_of_area = api_util.area_api_import(game_api.GetMenpaiOfArea)

--获取地块敌对建筑
---@param area AreaInstance 地块实例
get_enemy_building_of_area = api_util.area_api_import(game_api.GetEnemyBuildingOfArea)

--获取当前地块可能的敌对建筑占领者
---@param area AreaInstance 地块实例
---@return menpai MenpaiInstance 门派实例
building_attacker_of_area = api_util.area_api_import(game_api.GetBuildingAttackerOfArea)

--获取门派的所有角色
---@param menpai MenpaiInstance|string 门派实例
---@return List<RoleInstance> roles 门派所有角色列表
roles_of_menpai = api_util.menpai_api_import(game_api.GetRolesOfMenpai)

--获取门派的所有弟子
---@param menpai MenpaiInstance 门派实例
---@return List<RoleInstance> roles 门派所有弟子列表
disciples_of_menpai = api_util.menpai_api_import(game_api.GetDisciplesOfMenpai)

--获取门派的所有佣兵
---@param menpai MenpaiInstance 门派实例
mercenaries_of_menpai = api_util.menpai_api_import(game_api.GetMercenariesOfMenpai)

--获取玩家门派的所有佣兵
player_mercenaries = game_api.GetPlayerMenpaiMercenaries

--门派随机生成弟子
---@param menpai MenpaiInstance 门派实例
---@return boolean 生成的角色实例
add_random_disciple = api_util.menpai_api_import(game_api.AddRandomDisciple)

--门派添加指定弟子
---@param menpai MenpaiInstance 门派实例
---@param role RoleInstance 添加的门派弟子
---@return boolean 是否添加成功
add_disciple = api_util.menpai_api_import(game_api.AddDisciple)

--门派根据表Id添加指定弟子
---@param menpai MenpaiInstance 门派实例
---@param beanId string 表格Id
---@return RoleInstance 门派弟子实例
add_disciple_by_id = api_util.menpai_api_import(game_api.AddDiscipleByBeanId)

--玩家获得该角色
local CSHARP_ADD_DISCIPLE = game_api.PlayerAddDisciple
---@param role RoleInstance|string 角色实例或者角色表Id
---@return boolean 是否招募成功
function player_add_disciple(role, notifyMsg)
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    if notifyMsg ~= false then
        show_role(role)
    end
    return CSHARP_ADD_DISCIPLE(role)
end

--显示当前角色
---@param role RoleInstance 角色实例
show_role = util.async_to_sync(game_api.ShowRole)

--让某个角色死亡
---@param role RoleInstance|string 角色实例或者角色表Id
---@return boolean 是否击杀
local CSHARP_KILL_ROLE = game_api.KillRole
function kill_disciple(role, notifyMsg)
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    notifyMsg = notifyMsg or true
    return CSHARP_KILL_ROLE(role, notifyMsg)
end

--门派随机移除弟子
---@param menpai MenpaiInstance 门派实例
---@return boolean 是否移除成功
remove_random_disciple = api_util.menpai_api_import(game_api.RemoveRandomDisciple)

---玩家门派添加指定弟子
---@return boolean 是否移除成功
player_remove_random_disciple = game_api.PlayerRemoveRandomDisciple

--门派移除指定弟子
---@param menpai MenpaiInstance 门派实例
---@param role RoleInstance 移除的门派弟子
---@return boolean 是否移除成功
remove_disciple = api_util.menpai_role_api_import(game_api.RemoveDisciple)

--门派移除所有弟子
function remove_all_disciples(menpai)
    if type(menpai) == 'string' then
        menpai = get_menpai_by_id(menpai)
    end
    if not menpai then
        return false
    end
    local ret = false
    local allRoles = roles_of_menpai(menpai)
    for _, role in pairs(allRoles) do
        ret = remove_disciple(menpai, role)
    end
    return ret
end

--摧毁消灭门派
---@param menpai MenpaiInstance|string 门派实例
function destroy_menpai(menpaiId)
    local faction_control = require 'Common/faction'
    faction_control.destroy_faction(menpaiId)
end


---玩家门派移除指定弟子
---@param role RoleInstance 移除的门派弟子
---@return boolean 是否移除成功
player_remove_disciple = api_util.role_api_import(game_api.PlayerRemoveDisciple)

--角色加入门派
---@param role RoleInstance 角色实例
---@param menpai MenpaiInstance 门派实例
---@return boolean 是否加入成功
join_menpai = api_util.role_menpai_api_import(game_api.JoinMenpai)

--角色离开门派
---@param role RoleInstance|string 角色实例或者角色Id
---@return boolean 是否离开成功
leave_menpai = api_util.role_api_import(game_api.LeaveMenpai)

--门派占领地块建筑
local CSHARP_OCCUPY_BUILDING = util.async_to_sync(game_api.OccupyBuilding)
---@param menpai MenpaiInstance 门派实例
---@param area AreaInstance 地块实例
---@return boolean 是否占领成功
occupy_building = api_util.menpai_area_api_import(CSHARP_OCCUPY_BUILDING)

--玩家门派占领地块建筑
local CSHARP_PLAYER_OCCUPY_BUILDING = util.async_to_sync(game_api.PlayerOccupyBuilding)
---@param area AreaInstance 地块实例
---@return boolean 是否占领成功
player_occupy_building = api_util.area_api_import(CSHARP_PLAYER_OCCUPY_BUILDING)


--门派强制占领地块
local CSHARP_OCCUPY_AREA = util.async_to_sync(game_api.OccupyArea)
---@param menpai MenpaiInstance|string 门派Id或者门派实例
---@param area AreaInstance|string 地块Id或者地块实例
---@return boolean 是否占领成功
occupy_area = api_util.menpai_area_api_import(CSHARP_OCCUPY_AREA)

--玩家门派强制占领地块
local CSHARP_PLAYER_OCCUPY_AREA = util.async_to_sync(game_api.PlayerOccupyArea)
---@param Area AreaInstance|string 地块Instance或者Id
---@return boolean 是否占领成功
player_occupy_area = api_util.area_api_import(CSHARP_PLAYER_OCCUPY_AREA)

--门派夺回自己地块的建筑
local CSHARP_RECAPTURE_BUILDING = util.async_to_sync(game_api.ReCaptureBuilding)
---@param menpai MenpaiInstance|string 门派实例或者门派Id
---@param area AreaInstance|string 地块实例或者地块Id
---@return boolean 是否占领成功
recapture_building = api_util.menpai_area_api_import(CSHARP_RECAPTURE_BUILDING)

--玩家门派夺回自己地块的建筑
local CSHARP_PLAYER_RECAPTURE_BUILDING = util.async_to_sync(game_api.PlayerReCaptureBuilding)
---@param area AreaInstance|string 地块实例或ID
---@return boolean 是否占领成功
player_recapture_building = api_util.area_api_import(CSHARP_PLAYER_RECAPTURE_BUILDING)

--设置地块的自定义数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
---@param value string 值
set_area_flag = api_util.area_api_import(game_api.Area_SetFlag)

--获取地块的自定义数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
---@return value string 值
get_area_flag = api_util.area_api_import(game_api.Area_GetFlag)

--设置地块的自定义数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
---@param value string 值
has_area_flag = api_util.area_api_import(game_api.Area_HasFlag)

--移除地块的自定义数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
remove_area_flag = api_util.area_api_import(game_api.Area_RemoveFlag)

--设置地块的整型数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
---@param value int 值
set_area_int_flag = api_util.area_api_import(game_api.Area_SetIntFlag)

--获取地块的整型数据
---@param area AreaInstance|string 地块Id或者地块实例
---@param key string 自定义key名
---@return value int 返回int值
get_area_int_flag = api_util.area_api_import(game_api.Area_GetIntFlag)


-- 在两个地块间显示一次路线攻击动画
---@param startAreaId string 开始地块id
---@param endAreaId string 结束地块id
show_battle_route = util.async_to_sync(game_api.ShowBattleRoute)

--获取对方门派集合
---@return List<MenpaiInstance> 门派集合
get_other_menpais = game_api.GetOtherMenpais

--获取敌对门派集合
---@param menpai MenpaiInstance 门派实例
---@return List<MenpaiInstance> 敌对门派集合
get_enemy_menpais = api_util.menpai_api_import(game_api.GetEnemyMenpais)

--获取敌对门派数量
---@param menpai MenpaiInstance 门派实例
---@return int 敌对门派数量
get_enemy_menpai_count = api_util.menpai_api_import(game_api.GetEnemyMenpaiCount)

--获取结盟门派集合
---@param menpai MenpaiInstance 门派实例
---@return List<MenpaiInstance> 结盟门派集合
get_allied_menpais = api_util.menpai_api_import(game_api.GetAlliedMenpais)

--获取结盟门派数量
---@param menpai MenpaiInstance 门派实例
---@return int 结盟门派数量
get_allied_menpai_count = api_util.menpai_api_import(game_api.GetAlliedMenpaiCount)

--获取指定id的门派实例
---@param menpaiId string 门派Id
get_menpai_by_id = game_api.GetMenpaiByBeanId

--获取门派的所有地块实例
function areas_of_menpai(menpai)
    local res = {}
    if type(menpai) == 'string' then
        menpai = get_menpai_by_id(menpai)
    end
    if not menpai then
        return res
    end
    if menpai then
        for _, id in pairs(menpai.Areas) do
            local area = get_area(id)
            if area then
                res[#res + 1] = area
            end
        end
    end
    return res
end

--强制占领门派
function occupy_menpai(menpai1, menpai2)
    for _, area in pairs(areas_of_menpai(menpai2)) do
        occupy_area(menpai1, area.Id)
    end
end

--让两个门派进行一场快速战斗
---@param menpai1 MenpaiInstance 门派1
---@param menpai2 MenpaiInstance 门派2地块
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
menpai_battle_by_area = util.async_to_sync(game_api.BeginMenpaiBattleByArea)

--让两个门派进行一场快速战斗
---@param menpai1 string 门派1 Id
---@param menpai2 string 门派2 Id
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
menpai_battle_by_id = util.async_to_sync(game_api.BeginMenpaiBattleByBeanId)

--让两个门派进行一场快速战斗
---@param menpai1 MenpaiInstance 门派1
---@param menpai2 MenpaiInstance 门派2
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
menpai_battle = util.async_to_sync(game_api.BeginMenpaiBattle)

--让两个门派进行一场快速战斗
---@param menpai1 MenpaiInstance 门派1
---@param menpai2 MenpaiInstance 门派2
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
menpai_battle_recapture = util.async_to_sync(game_api.BeginReCaptureMenpaiBattle)

--锁定目标地块
---@param areaId string 地块的BeanId
lock_area = game_api.LockArea

--锁定目标门派的所有地块
---@param menPaiId string 门派的BeanId
lock_menpai = game_api.LockMenpai

--解锁目标地块
---@param areaId string 地块的BeanId
unlock_area = game_api.UnlockArea

--解锁门派的所有地块
---@param menPaiId string 门派的BeanId
unlock_menpai = function(menpai, suggest)
    game_api.UnlockMenpai(menpai)
    if(suggest) then
        pop_tip("解锁了邻近帮派： ".. menpai)
        play_sfx("Tip/temple.wav")
        wait_for_seconds(2)
    end
end

--获取已解锁的门派
get_unlocked_menpais = game_api.GetUnlockedMenpais

--获取已解锁的其他门派
function get_unlocked_other_menpais(menpai)
    local all_menpais = table.cslist_2_table(get_unlocked_menpais())
    return table.where(all_menpais, function(m) return m ~= menpai end)
end

--获取已解锁的可计谋的其他门派
function get_strategy_other_menpais(menpai)
    local all_menpais = table.cslist_2_table(get_unlocked_menpais())
    return table.where(all_menpais, function(m)
        if m ~= menpai then
            local diplomatic = require("Common/diplomatic")
            local relation = diplomatic.current_relation(m, menpai)
            return relation ~= 1
        end
    end)
end

--开局创建角色api
ask_player_create_role = game_api.AskPlayerCreateRole

--开始一场预设战斗
---@param battleId string 战斗配置表id
start_preset_battle = util.async_to_sync(game_api.StartPresetBattle)

--改变某个角色对玩家的好感度
---@param role RoleInstance 角色实例
---@param int Favor 好感度值，正负均可
change_favor = api_util.role_api_import(game_api.ChangeFavor)

--改变某个角色的等级
---@param roleId roleId 角色表Id
---@param int level 改变等级(1-30范围)
set_role_level = game_api.SetRoleLevelById

--改变某个角色的立绘
---@param roleId RoleInstance 角色实例
---@param string pic 立绘文件名
set_role_pic = game_api.SetRolePic

--还原某个角色的立绘
---@param roleId RoleInstance 角色实例
restor_role_pic = game_api.RestorePic

--改变某个角色的模型
---@param roleId RoleInstance 角色实例
---@param string modelId 模型ID
set_role_model = game_api.SetRoleModel

--还原某个角色的模型
---@param roleId RoleInstance 角色实例
restor_role_model = game_api.RestoreModel

--获得某个角色对玩家的好感度
---@param roleId roleId 角色表Id
function get_favor_by_id(roleId)
    local role = get_role_by_id(roleId)
    if not role then
        return 0
    end
    return role.Favor
end

--改变某个角色对玩家的好感度
---@param roleId roleId 角色表Id
---@param int Favor 好感度值，正负均可
function change_favor_by_id(roleId, Favor)
    local role = get_role_by_id(roleId)
    if not role then
        return
    end
    change_favor(role, Favor)
end

--招募俘虏
---@param role RoleInstance 角色实例
---@return boolean 是否招募成功
player_recruit_prisoner = function(role, notifyMsg)
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    if not role.IsCapture then
        return false
    end
    notifyMsg = notifyMsg or true
    if notifyMsg then
        show_role(role)
    end
    return CSHARP_ADD_DISCIPLE(role)
end

--创建临时角色(不会保存在存档中)
local newtempRole = game_api.NewTempRole
create_temp_role = function(id, level)
    level = level or -1
    return newtempRole(id, level)
end

--在当前存档创建一个新角色(保存在存档中, 唯一性角色不会重复创建)
local newsaveRole = game_api.NewSaveRole
create_save_role = function(id, level)
    level = level or -1
    return newsaveRole(id, level)
end


--获取此角色配置的默认初始等级
---@param roleId string 角色Id
---@return int 默认等级
default_level_of_role = game_api.DefaultLevelOfRole

--根据角色Id获得角色
---@param roleId string 角色Id
---@return RoleInstance 角色实例
get_role_by_id = game_api.GetRoleByBeanId

--获取玩家角色
---@return RoleInstance 角色实例
get_player_role = game_api.GetPlayerRole

--根据角色Id获得角色
---@param roleId int 角色实例Id
---@return RoleInstance 角色实例
get_role_by_instanceId = game_api.GetRole

--获取角色实例的所属门派实例
---@param role RoleInstance 角色实例
---@return menpai MenpaiInstance 门派实例
menpai_of_role = api_util.role_api_import(game_api.GetMenpaiOfRole)

--门派释放俘虏
---@param menpai MenpaiInstance 门派实例
---@param role RoleInstance 角色实例
---@return boolean 是否释放成功
release_prisoner = api_util.menpai_role_api_import(game_api.ReleasePrisoner)

---玩家门派释放俘虏
---@param role RoleInstance 角色实例
---@return boolean 是否释放成功
player_release_prisoner = api_util.role_api_import(game_api.PlayerReleasePrisoner)

--门派捕获俘虏
---@param menpai MenpaiInstance|string 门派实例
---@param role RoleInstance|string 角色实例
---@return boolean 是否捕获成功
capture_prisoner = api_util.menpai_role_api_import(game_api.CapturePrisoner)

--门派是否有某个角色
---@param menpai MenpaiInstance|string 门派实例
---@param role RoleInstance|string 角色实例
---@return boolean 是否存在该角色
menpai_has_role = api_util.menpai_role_api_import(game_api.MenpaiHasRole)


--玩家门派是否有某个角色
---@param role RoleInstance|string 角色实例
---@return boolean 是否存在该角色
function player_menpai_has_role(role)
    return menpai_has_role(get_player_menpai(), role)
end

--通知所有者变更
local CSHARP_AREA_OWNER_CHANGED = game_api.BroadcastAreaOwnerChanged

--设置门派掌门
---@param menpai MenpaiInstance|string 门派实例
---@param role RoleInstance|string 角色实例
---@param area AreaInstance|string 地块Id或者地块实例
---@return boolean 是否成功
set_menpai_leader = function(menpai, role, area)
    if type(menpai) == 'string' then
        menpai = get_menpai_by_id(menpai)
    end
    if type(role) == 'string' then
        role = get_role_by_id(role)
    end
    if type(area) == 'string' then
        area = get_area_by_id(area)
    end
    if game_api.SetMenpaiLeader(menpai, role) then
        if area then
            CSHARP_AREA_OWNER_CHANGED(area, menpai)
        end
    end
    return true
end

---玩家门派捕获俘虏
---@param role RoleInstance|string 角色实例或者角色Id
---@return boolean 是否捕获成功
player_capture_prisoner = api_util.role_api_import(game_api.PlayerCapturePrisoner)

--门派雇佣角色
---@param menpai MenpaiInstance 门派实例
---@param role RoleInstance 角色实例
---@return boolean 是否雇佣成功
hire_role = api_util.menpai_role_api_import(game_api.HireRole)

--玩家门派雇佣角色
---@param role RoleInstance|string 角色实例或者角色Id
---@return boolean 是否雇佣成功
player_hire_role = api_util.role_api_import(game_api.PlayerHireRole)

--门派解雇角色
---@param menpai MenpaiInstance 门派实例
---@param role RoleInstance 角色实例
---@return boolean 是否解雇成功
fire_role  = api_util.menpai_role_api_import(game_api.FireRole)

--玩家门派解雇角色
---@param role RoleInstance 角色实例
---@return boolean 是否解雇成功
player_fire_role = api_util.role_api_import(game_api.PlayerFireRole)

--获取门派下一个可触发的剧情
---@param menpai MenpaiInstance 门派实例
next_menpai_story = api_util.menpai_api_import(game_api.NextMenpaiStory)

--提示飘字
---@param message string 要展示的信息文本
local CSHARP_TIP = game_api.PopTip
function pop_tip(msg)
    msg = i18n_text(msg)
    CSHARP_TIP(msg)
end

--提示弹窗(二选一，阻塞协程)
---@param message string 要展示的询问文本
local CSHARP_YES_OR_NO = util.async_to_sync(game_api.YesOrNo)
function yes_or_no(msg)
    msg = i18n_text(msg)
    return CSHARP_YES_OR_NO(msg)
end

--卡片展示(阻塞协程)
show_card = util.async_to_sync(game_api.ShowCard)

--特写展示(阻塞协程)
show_close_up = util.async_to_sync(game_api.ShowCloseUp)

--尝试让一个角色运行指定Id的主技能
---@param RoleInstance role 角色实例
---@param string skillId 技能表id
---@return bool success 是否成功
try_equip_skill = api_util.role_api_import(game_api.TryEquipSkill)

--治疗伤势
---@param role RoleInstance 角色实例
---@param int recoverValue 恢复值
cure_wound = api_util.role_api_import(game_api.CureWound)

--恢复行动次数
recover_action_count = game_api.RecoverActionCount

--获取指定地块的地块实例
---@param id int AreaInstance的InstanceId
---@return AreaInstance 地块实例
get_area = game_api.GetArea

--增加或者减少地块发展度
---@param area AreaInstance|string 地块实例或Id
---@param develop int 发展度变化值
change_area_develop = api_util.area_api_import(game_api.ChangeAreaDevelop)

--获取指定地块的地块实例
---@param id string 地块Id
---@return AreaInstance 地块实例
get_area_by_id = game_api.GetAreaByBeanId

--获取指定地块的邻居地块Id集合
---@param area AreaInstance|string 地块实例或Id
---@return List<AreaInstance> 邻居地块集合
get_neighbors =  api_util.area_api_import(game_api.GetNeighbors)


--获取相邻门派
function get_neighbor_menpais(menpai)
    local neighbors = {} --key: 相邻门派Id, value: areaId
    local areas = areas_of_menpai(menpai)
    for _, area in pairs(areas) do
        for _, n in pairs(get_neighbors(area)) do
            if n ~= nil then        
                for _, m in pairs(get_strategy_other_menpais(menpai)) do
                    if m ~= nil and n.Owner == m.InstanceId then
                        --判断是否已经在neighbors中
                        if neighbors[m.Id] == nil then
                            neighbors[m.Id] = area.Id
                        end
                    end
                end
            end
        end
    end
    return neighbors
end

--获取所有角色
---@return List<RoleInstance> 角色集合
get_roles = game_api.GetRoles

--获取可用的事件行为
---@param string eventName 事件名称
---@return List<EventActionInstance> 可用的事件行为集合
get_available_event_actions = game_api.GetAvailableEventActions

--准备进入副本
---@param dungeonId string 副本表id
enter_dungeon = game_api.PrepareDungeon

--设置副本任务进度
---@param dungeonId string 副本表id
---@param taskid string 任务id
---@param changeValue int 改变值，负数则为减少
add_dungeon_task_progress = game_api.AddDungeonTaskProgress

--设置副本任务结果
---@param dungeonId string 副本表id
---@param taskid string 任务id
---@param result bool 结果 true=成功 false=失败
set_dungeon_task_result = game_api.SetDungeonTaskResult

--是否达到副本任务进度
---@param dungeonId string 副本表id
---@param taskid string 任务id
is_reach_task_count = game_api.IsReachTaskCount

--开始一场副本战斗
---@param dungeonId string 副本表id
---@param battleId string 战斗配置表id
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
dungeon_battle = util.async_to_sync(game_api.StartDungeonBattle)

--副本失败
dungeon_fail = util.async_to_sync(game_api.DungeonFail)

--副本成功
dungeon_success = util.async_to_sync(game_api.DungeonSuccess)

--获得副本角色
---@param dungeonId string 副本表id
roles_joined_dungeon = game_api.GetRolesJoinedDungeon

--让一个角色加入副本队伍
---@param roleId string 角色表id
---@param dungeonId string 副本表id
role_join_dungeon = game_api.RoleJoinDungeon

--判断一个角色是否在副本队伍中
---@param roleId string 角色表id
---@param dungeonId string 副本表id
is_in_dungeon = game_api.IsInDungeon

--让一个角色离开副本队伍
---@param roleId string 角色表id
---@param dungeonId string 副本表id
role_leave_dungeon = game_api.RoleLeaveDungeon

--添加角色词缀
---@param role RoleInstance|string 角色实例
---@param affixId string 词缀Id random代表随机
---@param lifeCount int 持续战斗次数(对永久性词缀无效)
role_add_affix = api_util.role_api_import(game_api.AddAffix)

--移除角色词缀
---@param role RoleInstance|string 角色实例
---@param affixId string 词缀Id
role_remove_affix = api_util.role_api_import(game_api.RemoveAffix)

--变化词缀
function roleId_change_affix(roleId, affixId, preAffixId)
    if role_remove_affix(roleId, preAffixId) then
        local affix = role_add_affix(roleId, affixId)
        pop_tip(string.i18_format("专属词缀升级为{0}", affix_tip_link(affix.AffixName, affix.AffixName, affix.AffixQuality:GetLevelColorStr())))
    end 
end

--开启角色选择界面，从一组角色中选择一名角色，阻塞协程
---@param rolesForSelect List<RoleInstace> 用于选择的角色列表
---@return isConfirm bool 是否确认选择
---@return role RoleInstance 选择的角色示例, 如果isConfirm为false此返回值为nil
single_role_select = util.async_to_sync(game_api.SingleRoleSelect)

--开启角色多选择界面，从一组角色中选择一名角色，阻塞协程
---@param rolesForSelect List<RoleInstace> 用于选择的角色列表
---@param maxSelectCount int 最大可选择次数
---@return isConfirm bool 是否确认选择
---@return roles List<RoleInstance> 已选择的角色列表, 如果isConfirm为false此返回值为nil
multi_role_select = util.async_to_sync(game_api.MultiRoleSelect)

--开启角色批量恢复伤势界面
---@param rolesForRecover List<RoleInstace> 需要恢复伤势的角色列表
role_batch_recover = game_api.OpenRolesBatchRecover

--获取物品品质的16进制颜色代码
---@param qualityLevel int 品质等级
---@return hexcolor string 颜色代码，比如'#00DA2E'
color_str_of_quality = game_api.GetColorStrOfQuality

--设定门派好感度
---@param menpaiA MenpaiInstance|string 门派实例或门派Id
---@param menpaiB MenpaiInstance|string  门派实例或者门派Id
---@param point int 设定的好感度
function set_both_friendship(menpaiA, menpaiB, point)
    local diplomatic = require("Common/diplomatic")
    local isvalid, menpaiA, menpaiB = diplomatic.try_get_menpai(menpaiA, menpaiB)
    if not isvalid then
        return
    end
    diplomatic.set_friendship(menpaiA, menpaiB, point)
    diplomatic.set_friendship(menpaiB, menpaiA, point)

    local msg = string.i18_format("{0}和{1}的好感度变为 <color=green>{2}</color> 点", menpaiA.Name, menpaiB.Name, point)

    pop_tip(msg)
   
    return point
end

--增加门派好感度
---@param menpaiA MenpaiInstance|string 门派实例或门派Id
---@param menpaiB MenpaiInstance|string  门派实例或者门派Id
---@param point int 改变的好感度
function change_both_friendship(menpaiA, menpaiB, point)
    local diplomatic = require("Common/diplomatic")
    local isvalid, menpaiA, menpaiB = diplomatic.try_get_menpai(menpaiA, menpaiB)
    if not isvalid then
        return
    end
    local A2B =  diplomatic.get_friendship(menpaiA, menpaiB) + point
    local B2A = diplomatic.get_friendship(menpaiB, menpaiA) + point

    diplomatic.set_friendship(menpaiA, menpaiB, A2B)
    diplomatic.set_friendship(menpaiB, menpaiA, B2A)

    if point > 0 then
        msg = string.i18_format("{0}和{1}的好感度增加了 <color=green>{2}</color> 点", menpaiA.Name, menpaiB.Name, point)
    else
        msg = string.i18_format("{0}和{1}的好感度减少了 <color=red>{2}</color> 点", menpaiA.Name, menpaiB.Name, -point)
    end

    pop_tip(msg)
   
    return point
end

--获取当前游戏回合数
function get_game_round()
    return runtime.CurrentSave.CurrentGameRound
end

--获取金钱
---@param MenpaiInstance menpai 门派实例
---@return int money 金钱数量
get_money = api_util.menpai_api_import(game_api.GetMoney)

--获取玩家金钱
---@return int money 金钱数量
get_player_money = game_api.GetPlayerMoney

--增加金钱
---@param MenpaiInstance menpai 门派实例
---@return int money 金钱数量
add_money = api_util.menpai_api_import(game_api.AddMoney)

--增加玩家金钱
---@param int money 金钱数量
add_player_money = game_api.AddPlayerMoney

--开启教程(在教程.xlsx中进行配置)
---@param tutorialId string 教程Id
open_tutorial = game_api.OpenTutorial

--游戏结束
--注意!!!: 需要放lua逻辑分支的最后，不然后续逻辑一些还会执行导致错乱
game_over = game_api.GameOver

--是否处于游戏结束状态
is_game_over = game_api.IsGameOver

--触发成就
---@param achivementId string 成就Id
---@param progress int 增加的进度
local Csharp_TriggerAchievement = game_api.TriggerAchievement
tgr_achivement = function(id, progress)
    progress = progress or 1
    Csharp_TriggerAchievement(id, progress)
end

--成就是否已解锁
is_ach_unlock = game_api.IsAchivementUnlocked

--是否在地图上
is_on_map = game_api.IsOnMap

--是否在过回合
is_enemy_turn = game_api.IsEnemyTurn

--打开商店
---@param string shopId 商店Id
open_shop = game_api.OpenShop

--替换商店商品
---@param string shopId 商店Id
---@param table shopItemIdList 新的商品Id列表 string
replace_shop_items = game_api.ReplaceShopItems

--刷新商店
---@param string shopId 商店Id
refresh_shop = game_api.RefreshShop


--全局状态机
trigger_event = game_api.TriggerEvent

--打开地牢
open_prison = game_api.OpenPrison

--隐藏沙盒地图及其交互UI
local set_sand_box_map_active = game_api.SetSandBoxMapVisibility
function hide_world_map()
    set_sand_box_map_active(false)
end

--显示沙盒地图及其交互UI
function show_world_map()
    set_sand_box_map_active(true)
end

----------游戏逻辑API函数结束(策划使用)-----------

--战斗API初始化

---开始战斗
---@param BattleStartParam param 战斗参数
---@return int winRet 获胜结果 1=队伍1  2=队伍2 -1=未完成 0=平局
start_battle = util.async_to_sync(game_api.StartBattle)

reloadModule 'Story/Api/story_api'

reloadModule 'battle_init'

reloadModule 'Attr/attr_api'

reloadModule 'Item/item_api'

reloadModule 'Role/role_api'

reloadModule 'Restoration/restoration_api'

reloadModule 'Common/difficulty'
